{"ast":null,"code":"const getArea = (a, b) => a * b;\nconst getPointDistance = (a, b) => Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\nexport const getElementVisibleWidth = (elementWidth, xOffset, ScreenWidth) => {\n  if (xOffset >= 0) {\n    return xOffset + elementWidth <= ScreenWidth ? elementWidth : ScreenWidth - xOffset;\n  }\n  return elementWidth - xOffset;\n};\nconst getTooltipCoordinate = (x, y, width, height, ScreenWidth, ScreenHeight, tooltipWidth, tooltipHeight, withPointer) => {\n  const center = [x + getElementVisibleWidth(width, x, ScreenWidth) / 2, y + height / 2];\n  const pOne = [center[0], 0];\n  const pTwo = [ScreenWidth, center[1]];\n  const pThree = [center[0], ScreenHeight];\n  const pFour = [0, center[1]];\n  const vOne = getPointDistance(center, pOne);\n  const vTwo = getPointDistance(center, pTwo);\n  const vThree = getPointDistance(center, pThree);\n  const vFour = getPointDistance(center, pFour);\n  const areas = [getArea(vOne, vFour), getArea(vOne, vTwo), getArea(vTwo, vThree), getArea(vThree, vFour)].map((each, index) => ({\n    area: each,\n    id: index\n  }));\n  const sortedArea = areas.sort((a, b) => b.area - a.area);\n  const dX = 0.001;\n  const dY = height / 2;\n  const directionCorrection = [[-1, -1], [1, -1], [1, 1], [-1, 1]];\n  const dislocateReferencePoint = [[-tooltipWidth, -tooltipHeight], [0, -tooltipHeight], [0, 0], [-tooltipWidth, 0]];\n  const qIndex = sortedArea[0].id;\n  const getWithPointerOffsetY = () => withPointer ? 10 * directionCorrection[qIndex][1] : 0;\n  const getWithPointerOffsetX = () => withPointer ? center[0] - 18 * directionCorrection[qIndex][0] : center[0];\n  const newX = getWithPointerOffsetX() + (dX * directionCorrection[qIndex][0] + dislocateReferencePoint[qIndex][0]);\n  return {\n    x: constraintX(newX, qIndex, center[0], ScreenWidth, tooltipWidth),\n    y: center[1] + (dY * directionCorrection[qIndex][1] + dislocateReferencePoint[qIndex][1]) + getWithPointerOffsetY()\n  };\n};\nconst constraintX = (newX, qIndex, x, ScreenWidth, tooltipWidth) => {\n  switch (qIndex) {\n    case 0:\n    case 3:\n      {\n        const maxWidth = newX > ScreenWidth ? ScreenWidth - 10 : newX;\n        return newX < 1 ? 10 : maxWidth;\n      }\n    case 1:\n    case 2:\n      {\n        const leftOverSpace = ScreenWidth - newX;\n        return leftOverSpace >= tooltipWidth ? newX : newX - (tooltipWidth - leftOverSpace + 10);\n      }\n    default:\n      {\n        return 0;\n      }\n  }\n};\nexport default getTooltipCoordinate;","map":{"version":3,"names":["getArea","a","b","getPointDistance","Math","sqrt","pow","getElementVisibleWidth","elementWidth","xOffset","ScreenWidth","getTooltipCoordinate","x","y","width","height","ScreenHeight","tooltipWidth","tooltipHeight","withPointer","center","pOne","pTwo","pThree","pFour","vOne","vTwo","vThree","vFour","areas","map","each","index","area","id","sortedArea","sort","dX","dY","directionCorrection","dislocateReferencePoint","qIndex","getWithPointerOffsetY","getWithPointerOffsetX","newX","constraintX","maxWidth","leftOverSpace"],"sources":["/home/jiri/lab/stripe-udemy/node_modules/@rneui/base/dist/Tooltip/helpers/getTooltipCoordinate.js"],"sourcesContent":["const getArea = (a, b) => a * b;\nconst getPointDistance = (a, b) => Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));\nexport const getElementVisibleWidth = (elementWidth, xOffset, ScreenWidth) => {\n    if (xOffset >= 0) {\n        return xOffset + elementWidth <= ScreenWidth\n            ? elementWidth\n            : ScreenWidth - xOffset;\n    }\n    return elementWidth - xOffset;\n};\nconst getTooltipCoordinate = (x, y, width, height, ScreenWidth, ScreenHeight, tooltipWidth, tooltipHeight, withPointer) => {\n    const center = [\n        x + getElementVisibleWidth(width, x, ScreenWidth) / 2,\n        y + height / 2,\n    ];\n    const pOne = [center[0], 0];\n    const pTwo = [ScreenWidth, center[1]];\n    const pThree = [center[0], ScreenHeight];\n    const pFour = [0, center[1]];\n    const vOne = getPointDistance(center, pOne);\n    const vTwo = getPointDistance(center, pTwo);\n    const vThree = getPointDistance(center, pThree);\n    const vFour = getPointDistance(center, pFour);\n    const areas = [\n        getArea(vOne, vFour),\n        getArea(vOne, vTwo),\n        getArea(vTwo, vThree),\n        getArea(vThree, vFour),\n    ].map((each, index) => ({ area: each, id: index }));\n    const sortedArea = areas.sort((a, b) => b.area - a.area);\n    const dX = 0.001;\n    const dY = height / 2;\n    const directionCorrection = [\n        [-1, -1],\n        [1, -1],\n        [1, 1],\n        [-1, 1],\n    ];\n    const dislocateReferencePoint = [\n        [-tooltipWidth, -tooltipHeight],\n        [0, -tooltipHeight],\n        [0, 0],\n        [-tooltipWidth, 0],\n    ];\n    const qIndex = sortedArea[0].id;\n    const getWithPointerOffsetY = () => withPointer ? 10 * directionCorrection[qIndex][1] : 0;\n    const getWithPointerOffsetX = () => withPointer ? center[0] - 18 * directionCorrection[qIndex][0] : center[0];\n    const newX = getWithPointerOffsetX() +\n        (dX * directionCorrection[qIndex][0] + dislocateReferencePoint[qIndex][0]);\n    return {\n        x: constraintX(newX, qIndex, center[0], ScreenWidth, tooltipWidth),\n        y: center[1] +\n            (dY * directionCorrection[qIndex][1] +\n                dislocateReferencePoint[qIndex][1]) +\n            getWithPointerOffsetY(),\n    };\n};\nconst constraintX = (newX, qIndex, x, ScreenWidth, tooltipWidth) => {\n    switch (qIndex) {\n        case 0:\n        case 3: {\n            const maxWidth = newX > ScreenWidth ? ScreenWidth - 10 : newX;\n            return newX < 1 ? 10 : maxWidth;\n        }\n        case 1:\n        case 2: {\n            const leftOverSpace = ScreenWidth - newX;\n            return leftOverSpace >= tooltipWidth\n                ? newX\n                : newX - (tooltipWidth - leftOverSpace + 10);\n        }\n        default: {\n            return 0;\n        }\n    }\n};\nexport default getTooltipCoordinate;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}