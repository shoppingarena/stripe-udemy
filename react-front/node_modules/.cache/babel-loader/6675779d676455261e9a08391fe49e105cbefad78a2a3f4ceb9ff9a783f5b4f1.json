{"ast":null,"code":"export const sumItems = cartItems => {\n  return {\n    itemCount: cartItems.reduce((total, prod) => total + prod.quantity, 0),\n    total: cartItems.reduce((total, prod) => total + prod.price * prod.quantity, 0)\n  };\n};\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_ITEM\":\n      // check if item is in cart\n      /* \n      In the  ADD_ITEM  case,\n      we update the cartItems array immutably by creating a new array with the existing items\n      and the new item.  \n       */\n      if (!state.cartItems.find(item => item.id === action.payload.id)) {\n        return {\n          ...state,\n          cartItems: [...state.cartItems, {\n            ...action.payload,\n            quantity: 1\n          }],\n          ...sumItems([...state.cartItems, {\n            ...action.payload,\n            quantity: 1\n          }])\n        };\n      }\n      return {\n        ...state,\n        cartItems: [...state.cartItems],\n        ...sumItems(state.cartItems)\n      };\n    case \"INCREASE\":\n      /*\n      Similarly, in the INCREASE case,\n      we create a new array with the updated quantity for the specific item.\n      By updating the state immutably,\n      you ensure that the component re-renders correctly\n      and the quantity is incremented properly when the \"Add More\" button is clicked.\n      */\n      const increaseIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      const updatedCartItems = [...state.cartItems];\n      updatedCartItems[increaseIndex] = {\n        ...updatedCartItems[increaseIndex],\n        quantity: updatedCartItems[increaseIndex].quantity + 1\n      };\n      return {\n        ...state,\n        cartItems: updatedCartItems,\n        ...sumItems(updatedCartItems)\n      };\n    case 'DECREASE':\n      const decreaseIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n      const product = state.cartItems[decreaseIndex];\n      if (product.quantity > 0) {\n        product.quantity--;\n      }\n      return {\n        ...state,\n        cartItems: [...state.cartItems],\n        ...sumItems(state.cartItems)\n      };\n    case 'REMOVE':\n      const newCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n      return {\n        ...state,\n        cartItems: [...newCartItems],\n        ...sumItems(newCartItems)\n      };\n    case 'CLEAR':\n      return {\n        cartItems: [],\n        itemCount: 0,\n        total: 0\n      };\n    default:\n      return state;\n  }\n};\nexport default cartReducer;","map":{"version":3,"names":["sumItems","cartItems","itemCount","reduce","total","prod","quantity","price","cartReducer","state","action","type","find","item","id","payload","increaseIndex","findIndex","updatedCartItems","decreaseIndex","product","newCartItems","filter"],"sources":["/home/jiri/lab/stripe-udemy/src/context/cart-reducer.jsx"],"sourcesContent":["export const sumItems = cartItems => {\n    return {\n        itemCount: cartItems.reduce((total, prod ) => total + prod.quantity, 0),\n        total: cartItems.reduce((total, prod) => total + (prod.price * prod.quantity), 0)\n    }\n}\n\nconst cartReducer = (state, action) => {\n    switch(action.type) {\n        case \"ADD_ITEM\":\n            // check if item is in cart\n            /* \n            In the  ADD_ITEM  case,\n            we update the cartItems array immutably by creating a new array with the existing items\n            and the new item.  \n             */\n            if (!state.cartItems.find((item) => item.id === action.payload.id)) {\n              return {\n                ...state,\n                cartItems: [\n                  ...state.cartItems,\n                  { ...action.payload, quantity: 1 },\n                ],\n                ...sumItems([...state.cartItems, { ...action.payload, quantity: 1 }]),\n              };\n            }\n            return {\n              ...state,\n              cartItems: [...state.cartItems],\n              ...sumItems(state.cartItems),\n            };\n      \n          case \"INCREASE\":\n            /*\n            Similarly, in the INCREASE case,\n            we create a new array with the updated quantity for the specific item.\n            By updating the state immutably,\n            you ensure that the component re-renders correctly\n            and the quantity is incremented properly when the \"Add More\" button is clicked.\n            */\n            const increaseIndex = state.cartItems.findIndex(\n              (item) => item.id === action.payload.id\n            );\n            const updatedCartItems = [...state.cartItems];\n            updatedCartItems[increaseIndex] = {\n              ...updatedCartItems[increaseIndex],\n              quantity: updatedCartItems[increaseIndex].quantity + 1,\n            };\n            return {\n              ...state,\n              cartItems: updatedCartItems,\n              ...sumItems(updatedCartItems),\n            };\n\n            case 'DECREASE':\n            const decreaseIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n            const product = state.cartItems[decreaseIndex];\n            if (product.quantity > 0) {\n              product.quantity--;\n            }\n            return {\n              ...state,\n              cartItems: [...state.cartItems],\n              ...sumItems(state.cartItems),\n            }\n          \n          case 'REMOVE':\n            const newCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n            return {\n                ...state,\n                cartItems: [...newCartItems],\n                ...sumItems(newCartItems),\n            }\n\n          case 'CLEAR':\n            return {\n              cartItems: [],\n              itemCount: 0,\n              total: 0,\n            }\n\n          default:\n            return state;\n        }\n      };\nexport default cartReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}